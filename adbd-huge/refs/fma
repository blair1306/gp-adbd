<dec f='codebrowser/bionic/libc/include/math.h' l='202' type='double fma(double , double , double )'/>
<def f='codebrowser/bionic/libm/upstream-freebsd/lib/msun/src/s_fma.c' l='177' ll='284' type='double fma(double x, double y, double z)'/>
<doc f='codebrowser/bionic/libm/upstream-freebsd/lib/msun/src/s_fma.c' l='160'>/*
 * Fused multiply-add: Compute x * y + z with a single rounding error.
 *
 * We use scaling to avoid overflow/underflow, along with the
 * canonical precision-doubling technique adapted from:
 *
 *	Dekker, T.  A Floating-Point Technique for Extending the
 *	Available Precision.  Numer. Math. 18, 224-242 (1971).
 *
 * This algorithm is sensitive to the rounding precision.  FPUs such
 * as the i387 must be set in double-precision mode if variables are
 * to be stored in FP registers in order to avoid incorrect results.
 * This is the default on FreeBSD, but not on many other systems.
 *
 * Hardware instructions should be used on architectures that support it,
 * since this implementation will likely be several times slower.
 */</doc>
