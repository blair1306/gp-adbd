<def f='codebrowser/bionic/libc/stdio/local.h' l='59' ll='107'/>
<size>152</size>
<mbr r='__sFILE::_p' o='0' t='unsigned char *'/>
<mbr r='__sFILE::_r' o='64' t='int'/>
<mbr r='__sFILE::_w' o='96' t='int'/>
<mbr r='__sFILE::_flags' o='128' t='int'/>
<mbr r='__sFILE::_file' o='160' t='int'/>
<mbr r='__sFILE::_bf' o='192' t='struct __sbuf'/>
<mbr r='__sFILE::_lbfsize' o='320' t='int'/>
<mbr r='__sFILE::_cookie' o='384' t='void *'/>
<mbr r='__sFILE::_close' o='448' t='int (*)(void *)'/>
<mbr r='__sFILE::_read' o='512' t='int (*)(void *, char *, int)'/>
<mbr r='__sFILE::_seek' o='576' t='fpos_t (*)(void *, fpos_t, int)'/>
<mbr r='__sFILE::_write' o='640' t='int (*)(void *, const char *, int)'/>
<mbr r='__sFILE::_ext' o='704' t='struct __sbuf'/>
<mbr r='__sFILE::_up' o='832' t='unsigned char *'/>
<mbr r='__sFILE::_ur' o='896' t='int'/>
<mbr r='__sFILE::_ubuf' o='928' t='unsigned char [3]'/>
<mbr r='__sFILE::_nbuf' o='952' t='unsigned char [1]'/>
<mbr r='__sFILE::_lb' o='960' t='struct __sbuf'/>
<mbr r='__sFILE::_blksize' o='1088' t='int'/>
<mbr r='__sFILE::_unused_0' o='1152' t='fpos_t'/>
<def f='codebrowser/prebuilts/ndk/r11/platforms/android-21/arch-x86_64/usr/include/stdio.h' l='108' ll='145'/>
<size>152</size>
<doc f='codebrowser/prebuilts/ndk/r11/platforms/android-21/arch-x86_64/usr/include/stdio.h' l='81'>/*
 * stdio state variables.
 *
 * The following always hold:
 *
 *	if (_flags&amp;(__SLBF|__SWR)) == (__SLBF|__SWR),
 *		_lbfsize is -_bf._size, else _lbfsize is 0
 *	if _flags&amp;__SRD, _w is 0
 *	if _flags&amp;__SWR, _r is 0
 *
 * This ensures that the getc and putc macros (or inline functions) never
 * try to write or read from a file that is in `read&apos; or `write&apos; mode.
 * (Moreover, they can, and do, automatically switch from read mode to
 * write mode, and back, on &quot;r+&quot; and &quot;w+&quot; files.)
 *
 * _lbfsize is used only to make the inline line-buffered output stream
 * code as compact as possible.
 *
 * _ub, _up, and _ur are used when ungetc() pushes back more characters
 * than fit in the current _bf, or when ungetc() pushes back a character
 * that does not match the previous one in _bf.  When this happens,
 * _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
 * _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
 *
 * NOTE: if you change this structure, you also need to update the
 * std() initializer in findfp.c.
 */</doc>
<mbr r='__sFILE::_p' o='0' t='unsigned char *'/>
<mbr r='__sFILE::_r' o='64' t='int'/>
<mbr r='__sFILE::_w' o='96' t='int'/>
<mbr r='__sFILE::_flags' o='128' t='int'/>
<mbr r='__sFILE::_file' o='160' t='int'/>
<mbr r='__sFILE::_bf' o='192' t='struct __sbuf'/>
<mbr r='__sFILE::_lbfsize' o='320' t='int'/>
<mbr r='__sFILE::_cookie' o='384' t='void *'/>
<mbr r='__sFILE::_close' o='448' t='int (*)(void *)'/>
<mbr r='__sFILE::_read' o='512' t='int (*)(void *, char *, int)'/>
<mbr r='__sFILE::_seek' o='576' t='fpos_t (*)(void *, fpos_t, int)'/>
<mbr r='__sFILE::_write' o='640' t='int (*)(void *, const char *, int)'/>
<mbr r='__sFILE::_ext' o='704' t='struct __sbuf'/>
<mbr r='__sFILE::_up' o='832' t='unsigned char *'/>
<mbr r='__sFILE::_ur' o='896' t='int'/>
<mbr r='__sFILE::_ubuf' o='928' t='unsigned char [3]'/>
<mbr r='__sFILE::_nbuf' o='952' t='unsigned char [1]'/>
<mbr r='__sFILE::_lb' o='960' t='struct __sbuf'/>
<mbr r='__sFILE::_blksize' o='1088' t='int'/>
<mbr r='__sFILE::_offset' o='1152' t='fpos_t'/>
