<dec f='codebrowser/external/minijail/libminijail-private.h' l='45' type='int minijail_marshal(const struct minijail * j, char * buf, size_t size)'/>
<def f='codebrowser/external/minijail/libminijail.c' l='774' ll='780' type='int minijail_marshal(const struct minijail * j, char * buf, size_t available)'/>
<use f='codebrowser/external/minijail/libminijail.c' l='1589' u='c' c='minijail_to_fd'/>
<doc f='codebrowser/external/minijail/libminijail-private.h' l='30'>/* minijail_marshal: serializes @j to @buf
 * @j    minijail to serialize
 * @buf  buffer to serialize to
 * @size size of @buf
 *
 * Returns 0 on success.
 *
 * Writes |j| to |buf| such that it can be reparsed by the same
 * library on the same architecture.  This is meant to be used
 * by minijail0.c and libminijailpreload.c.  minijail flags that
 * require minijail_run() will be excluded.
 *
 * The marshalled data is not robust to differences between the child
 * and parent process (personality, etc).
 */</doc>
