<dec f='codebrowser/bionic/libc/include/math.h' l='218' type='double remquo(double , double , int * )'/>
<def f='codebrowser/bionic/libm/upstream-freebsd/lib/msun/src/s_remquo.c' l='31' ll='155' type='double remquo(double x, double y, int * quo)'/>
<doc f='codebrowser/bionic/libm/upstream-freebsd/lib/msun/src/s_remquo.c' l='23'>/*
 * Return the IEEE remainder and set *quo to the last n bits of the
 * quotient, rounded to the nearest integer.  We choose n=31 because
 * we wind up computing all the integer bits of the quotient anyway as
 * a side-effect of computing the remainder by the shift and subtract
 * method.  In practice, this is far more bits than are needed to use
 * remquo in reduction algorithms.
 */</doc>
