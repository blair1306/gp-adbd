<dec f='codebrowser/external/libcxxabi/include/cxxabi.h' l='47' type='void * __cxa_begin_catch(void * exceptionObject)'/>
<use f='codebrowser/external/libcxxabi/src/cxa_exception.cpp' l='148' u='c' c='__cxxabiv1::failed_throw'/>
<def f='codebrowser/external/libcxxabi/src/cxa_exception.cpp' l='385' ll='425' type='void * __cxa_begin_catch(void * unwind_arg)'/>
<use f='codebrowser/external/libcxxabi/src/cxa_exception.cpp' l='582' u='c' c='__cxa_rethrow'/>
<use f='codebrowser/external/libcxxabi/src/cxa_exception.cpp' l='707' u='c' c='__cxa_rethrow_primary_exception'/>
<doc f='codebrowser/external/libcxxabi/src/cxa_exception.cpp' l='354'>/*
This routine can catch foreign or native exceptions.  If native, the exception
can be a primary or dependent variety.  This routine may remain blissfully
ignorant of whether the native exception is primary or dependent.

If the exception is native:
* Increment&apos;s the exception&apos;s handler count.
* Push the exception on the stack of currently-caught exceptions if it is not 
  already there (from a rethrow).
* Decrements the uncaught_exception count.
* Returns the adjusted pointer to the exception object, which is stored in
  the __cxa_exception by the personality routine.

If the exception is foreign, this means it did not originate from one of throw
routines.  The foreign exception does not necessarily have a __cxa_exception
header.  However we can catch it here with a catch (...), or with a call
to terminate or unexpected during unwinding.
* Do not try to increment the exception&apos;s handler count, we don&apos;t know where
  it is.
* Push the exception on the stack of currently-caught exceptions only if the
  stack is empty.  The foreign exception has no way to link to the current
  top of stack.  If the stack is not empty, call terminate.  Even with an
  empty stack, this is hacked in by pushing a pointer to an imaginary
  __cxa_exception block in front of the foreign exception.  It would be better
  if the __cxa_eh_globals structure had a stack of _Unwind_Exception, but it
  doesn&apos;t.  It has a stack of __cxa_exception (which has a next* in it).
* Do not decrement the uncaught_exception count because we didn&apos;t increment it
  in __cxa_throw (or one of our rethrow functions).
* If we haven&apos;t terminated, assume the exception object is just past the 
  _Unwind_Exception and return a pointer to that.
*/</doc>
<use f='codebrowser/external/libcxxabi/src/cxa_personality.cpp' l='309' u='c' c='_ZN10__cxxabiv114call_terminateEbP17_Unwind_Exception'/>
<use f='codebrowser/external/libcxxabi/src/cxa_personality.cpp' l='1171' u='c' c='__cxa_call_unexpected'/>
<use f='codebrowser/external/libcxxabi/src/cxa_personality.cpp' l='1264' u='c' c='__cxa_call_unexpected'/>
