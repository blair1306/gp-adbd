<def f='codebrowser/external/boringssl/src/include/openssl/ssl.h' l='932' ll='999'/>
<size>48</size>
<doc f='codebrowser/external/boringssl/src/include/openssl/ssl.h' l='930'>/* SSL_PRIVATE_KEY_METHOD describes private key hooks. This is used to off-load
 * signing operations to a custom, potentially asynchronous, backend. */</doc>
<mbr r='ssl_private_key_method_st::type' o='0' t='int (*)(SSL *)'/>
<mbr r='ssl_private_key_method_st::max_signature_len' o='64' t='size_t (*)(SSL *)'/>
<mbr r='ssl_private_key_method_st::sign' o='128' t='enum ssl_private_key_result_t (*)(SSL *, uint8_t *, size_t *, size_t, const EVP_MD *, const uint8_t *, size_t)'/>
<mbr r='ssl_private_key_method_st::sign_complete' o='192' t='enum ssl_private_key_result_t (*)(SSL *, uint8_t *, size_t *, size_t)'/>
<mbr r='ssl_private_key_method_st::decrypt' o='256' t='enum ssl_private_key_result_t (*)(SSL *, uint8_t *, size_t *, size_t, const uint8_t *, size_t)'/>
<mbr r='ssl_private_key_method_st::decrypt_complete' o='320' t='enum ssl_private_key_result_t (*)(SSL *, uint8_t *, size_t *, size_t)'/>
