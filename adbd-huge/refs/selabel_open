<dec f='codebrowser/external/libselinux/include/selinux/label.h' l='71' type='struct selabel_handle * selabel_open(unsigned int backend, const struct selinux_opt * opts, unsigned int nopts)'/>
<use f='codebrowser/external/libselinux/src/android.c' l='1372' u='c' c='selinux_android_file_context_handle'/>
<use f='codebrowser/external/libselinux/src/android.c' l='1393' u='c' c='selinux_android_prop_context_handle'/>
<use f='codebrowser/external/libselinux/src/android.c' l='1410' u='c' c='selinux_android_service_context_handle'/>
<doc f='codebrowser/external/libselinux/include/selinux/label.h' l='59'>/**
 * selabel_open - Create a labeling handle.
 * @backend: one of the constants specifying a supported labeling backend.
 * @opts: array of selabel_opt structures specifying label options or NULL.
 * @nopts: number of elements in opts array or zero for no options.
 *
 * Open a labeling backend for use.  The available backend identifiers are
 * listed above.  Options may be provided via the opts parameter; available
 * options are listed above.  Not all options may be supported by every
 * backend.  Return value is the created handle on success or NULL with
 * @errno set on failure.
 */</doc>
<def f='codebrowser/external/libselinux/src/label.c' l='66' ll='96' type='struct selabel_handle * selabel_open(unsigned int backend, const struct selinux_opt * opts, unsigned int nopts)'/>
<doc f='codebrowser/external/libselinux/src/label.c' l='62'>/*
 * Public API
 */</doc>
