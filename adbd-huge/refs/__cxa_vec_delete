<dec f='codebrowser/external/libcxxabi/include/cxxabi.h' l='123' type='void __cxa_vec_delete(void * array_address, size_t element_size, size_t padding_size, void (*)(void *) destructor)'/>
<def f='codebrowser/external/libcxxabi/src/cxa_vector.cpp' l='319' ll='324' type='void __cxa_vec_delete(void * array_address, size_t element_size, size_t padding_size, void (*)(void *) destructor)'/>
<doc f='codebrowser/external/libcxxabi/src/cxa_vector.cpp' l='300'>// If the array_address is NULL, return immediately. Otherwise, given the
// (data) address of an array, the non-negative size of prefix padding for
// the cookie, and the size of its elements, call the given destructor on
// each element, using the cookie to determine the number of elements, and
// then delete the space by calling ::operator delete[](void *). If the
// destructor throws an exception, rethrow after (a) destroying the
// remaining elements, and (b) deallocating the storage. If the destructor
// throws a second exception, call terminate(). If padding_size is 0, the
// destructor pointer must be NULL. If the destructor pointer is NULL, no
// destructor call is to be made.
// 
// The intent of this function is to permit an implementation to call this
// function when confronted with an expression of the form delete[] p in
// the source code, provided that the default deallocation function can be
// used. Therefore, the semantics of this function are consistent with
// those required by the standard. The requirement that the deallocation
// function be called even if the destructor throws an exception derives
// from the resolution to DR 353 to the C++ standard, which was adopted in
// April, 2003.</doc>
