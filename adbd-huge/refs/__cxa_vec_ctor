<dec f='codebrowser/external/libcxxabi/include/cxxabi.h' l='107' type='void __cxa_vec_ctor(void * array_address, size_t element_count, size_t element_size, void (*)(void *) constructor, void (*)(void *) destructor)'/>
<use f='codebrowser/external/libcxxabi/src/cxa_vector.cpp' l='162' u='c' c='__cxa_vec_new2'/>
<use f='codebrowser/external/libcxxabi/src/cxa_vector.cpp' l='191' u='c' c='__cxa_vec_new3'/>
<def f='codebrowser/external/libcxxabi/src/cxa_vector.cpp' l='234' ll='248' type='void __cxa_vec_ctor(void * array_address, size_t element_count, size_t element_size, void (*)(void *) constructor, void (*)(void *) destructor)'/>
<doc f='codebrowser/external/libcxxabi/src/cxa_vector.cpp' l='227'>// Given the (data) address of an array, not including any cookie padding,
// and the number and size of its elements, call the given constructor on
// each element. If the constructor throws an exception, call the given
// destructor for any already-constructed elements, and rethrow the
// exception. If the destructor throws an exception, call terminate(). The
// constructor and/or destructor pointers may be NULL. If either is NULL,
// no action is taken when it would have been called.</doc>
