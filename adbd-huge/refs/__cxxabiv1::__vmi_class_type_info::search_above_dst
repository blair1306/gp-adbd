<dec f='codebrowser/external/libcxxabi/src/private_typeinfo.h' l='200' type='void __cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info * , const void * , const void * , int , bool ) const'/>
<inh f='codebrowser/external/libcxxabi/src/private_typeinfo.cpp' l='1222' c='__cxxabiv1::__class_type_info::search_above_dst'/>
<def f='codebrowser/external/libcxxabi/src/private_typeinfo.cpp' l='1136' ll='1202' type='void __cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info * info, const void * dst_ptr, const void * current_ptr, int path_below, bool use_strcmp) const'/>
<doc f='codebrowser/external/libcxxabi/src/private_typeinfo.cpp' l='1110'>// Call this function when searching above a dst_type node.  This function searches
// for a public path to (static_ptr, static_type).
// This function is guaranteed not to find a node of type dst_type.
// Theoretically this is a very simple function which just stops if it finds a
// static_type node:  All the hoopla surrounding the search code is doing
// nothing but looking for excuses to stop the search prematurely (break out of
// the for-loop).  That is, the algorithm below is simply an optimization of this:
// void
// __vmi_class_type_info::search_above_dst(__dynamic_cast_info* info,
//                                         const void* dst_ptr,
//                                         const void* current_ptr,
//                                         int path_below) const
// {
//     if (this == info-&gt;static_type)
//         process_static_type_above_dst(info, dst_ptr, current_ptr, path_below);
//     else
//     {
//         typedef const __base_class_type_info* Iter;
//         // This is not a static_type and not a dst_type
//         for (Iter p = __base_info, e = __base_info + __base_count; p &lt; e; ++p)
//         {
//             p-&gt;search_above_dst(info, dst_ptr, current_ptr, public_path);
//             // break out early here if you can detect it doesn&apos;t matter if you do
//         }
//     }
// }</doc>
