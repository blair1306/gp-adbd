<dec f='codebrowser/external/boringssl/src/include/openssl/asn1.h' l='785' type='int i2c_ASN1_INTEGER(ASN1_INTEGER * a, unsigned char ** pp)'/>
<def f='codebrowser/external/boringssl/src/crypto/asn1/a_int.c' l='115' ll='175' type='int i2c_ASN1_INTEGER(ASN1_INTEGER * a, unsigned char ** pp)'/>
<doc f='codebrowser/external/boringssl/src/crypto/asn1/a_int.c' l='90'>/* 
 * This converts an ASN1 INTEGER into its content encoding.
 * The internal representation is an ASN1_STRING whose data is a big endian
 * representation of the value, ignoring the sign. The sign is determined by
 * the type: V_ASN1_INTEGER for positive and V_ASN1_NEG_INTEGER for negative. 
 *
 * Positive integers are no problem: they are almost the same as the DER
 * encoding, except if the first byte is &gt;= 0x80 we need to add a zero pad.
 *
 * Negative integers are a bit trickier...
 * The DER representation of negative integers is in 2s complement form.
 * The internal form is converted by complementing each octet and finally 
 * adding one to the result. This can be done less messily with a little trick.
 * If the internal form has trailing zeroes then they will become FF by the
 * complement and 0 by the add one (due to carry) so just copy as many trailing 
 * zeros to the destination as there are in the source. The carry will add one
 * to the last none zero octet: so complement this octet and add one and finally
 * complement any left over until you get to the start of the string.
 *
 * Padding is a little trickier too. If the first bytes is &gt; 0x80 then we pad
 * with 0xff. However if the first byte is 0x80 and one of the following bytes
 * is non-zero we pad with 0xff. The reason for this distinction is that 0x80
 * followed by optional zeros isn&apos;t padded.
 */</doc>
<use f='codebrowser/external/boringssl/src/crypto/asn1/tasn_enc.c' l='651' u='c' c='asn1_ex_i2c'/>
