<def f='codebrowser/external/boringssl/src/crypto/cipher/internal.h' l='74' ll='102'/>
<size>64</size>
<doc f='codebrowser/external/boringssl/src/crypto/cipher/internal.h' l='73'>/* EVP_AEAD represents a specific AEAD algorithm. */</doc>
<mbr r='evp_aead_st::key_len' o='0' t='uint8_t'/>
<mbr r='evp_aead_st::nonce_len' o='8' t='uint8_t'/>
<mbr r='evp_aead_st::overhead' o='16' t='uint8_t'/>
<mbr r='evp_aead_st::max_tag_len' o='24' t='uint8_t'/>
<mbr r='evp_aead_st::init' o='64' t='int (*)(EVP_AEAD_CTX *, const uint8_t *, size_t, size_t)'/>
<mbr r='evp_aead_st::init_with_direction' o='128' t='int (*)(EVP_AEAD_CTX *, const uint8_t *, size_t, size_t, enum evp_aead_direction_t)'/>
<mbr r='evp_aead_st::cleanup' o='192' t='void (*)(EVP_AEAD_CTX *)'/>
<mbr r='evp_aead_st::seal' o='256' t='int (*)(const EVP_AEAD_CTX *, uint8_t *, size_t *, size_t, const uint8_t *, size_t, const uint8_t *, size_t, const uint8_t *, size_t)'/>
<mbr r='evp_aead_st::open' o='320' t='int (*)(const EVP_AEAD_CTX *, uint8_t *, size_t *, size_t, const uint8_t *, size_t, const uint8_t *, size_t, const uint8_t *, size_t)'/>
<mbr r='evp_aead_st::get_rc4_state' o='384' t='int (*)(const EVP_AEAD_CTX *, const RC4_KEY **)'/>
<mbr r='evp_aead_st::get_iv' o='448' t='int (*)(const EVP_AEAD_CTX *, const uint8_t **, size_t *)'/>
