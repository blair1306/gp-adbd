<def f='codebrowser/external/libcxx/include/limits' l='440' ll='483'/>
<def f='codebrowser/external/libcxx/include/limits' l='532' ll='576'/>
<def f='codebrowser/external/libcxx/include/limits' l='625' ll='669'/>
<def f='codebrowser/external/libcxx/include/limits' l='718' ll='762'/>
<smbr r='std::__1::numeric_limits::is_specialized' t='const bool'/>
<fun r='_ZNSt3__114numeric_limits3minEv'/>
<fun r='_ZNSt3__114numeric_limits3maxEv'/>
<fun r='_ZNSt3__114numeric_limits6lowestEv'/>
<smbr r='std::__1::numeric_limits::digits' t='const int'/>
<smbr r='std::__1::numeric_limits::digits10' t='const int'/>
<smbr r='std::__1::numeric_limits::max_digits10' t='const int'/>
<smbr r='std::__1::numeric_limits::is_signed' t='const bool'/>
<smbr r='std::__1::numeric_limits::is_integer' t='const bool'/>
<smbr r='std::__1::numeric_limits::is_exact' t='const bool'/>
<smbr r='std::__1::numeric_limits::radix' t='const int'/>
<fun r='_ZNSt3__114numeric_limits7epsilonEv'/>
<fun r='_ZNSt3__114numeric_limits11round_errorEv'/>
<smbr r='std::__1::numeric_limits::min_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits::min_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits::max_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits::max_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits::has_infinity' t='const bool'/>
<smbr r='std::__1::numeric_limits::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::numeric_limits::has_denorm_loss' t='const bool'/>
<fun r='_ZNSt3__114numeric_limits8infinityEv'/>
<fun r='_ZNSt3__114numeric_limits9quiet_NaNEv'/>
<fun r='_ZNSt3__114numeric_limits13signaling_NaNEv'/>
<fun r='_ZNSt3__114numeric_limits10denorm_minEv'/>
<smbr r='std::__1::numeric_limits::is_iec559' t='const bool'/>
<smbr r='std::__1::numeric_limits::is_bounded' t='const bool'/>
<smbr r='std::__1::numeric_limits::is_modulo' t='const bool'/>
<smbr r='std::__1::numeric_limits::traps' t='const bool'/>
<smbr r='std::__1::numeric_limits::tinyness_before' t='const bool'/>
<smbr r='std::__1::numeric_limits::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::numeric_limits::is_specialized' t='const bool'/>
<smbr r='std::__1::numeric_limits::digits' t='const int'/>
<smbr r='std::__1::numeric_limits::digits10' t='const int'/>
<smbr r='std::__1::numeric_limits::max_digits10' t='const int'/>
<smbr r='std::__1::numeric_limits::is_signed' t='const bool'/>
<smbr r='std::__1::numeric_limits::is_integer' t='const bool'/>
<smbr r='std::__1::numeric_limits::is_exact' t='const bool'/>
<smbr r='std::__1::numeric_limits::radix' t='const int'/>
<smbr r='std::__1::numeric_limits::min_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits::min_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits::max_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits::max_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits::has_infinity' t='const bool'/>
<smbr r='std::__1::numeric_limits::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::numeric_limits::has_denorm_loss' t='const bool'/>
<smbr r='std::__1::numeric_limits::is_iec559' t='const bool'/>
<smbr r='std::__1::numeric_limits::is_bounded' t='const bool'/>
<smbr r='std::__1::numeric_limits::is_modulo' t='const bool'/>
<smbr r='std::__1::numeric_limits::traps' t='const bool'/>
<smbr r='std::__1::numeric_limits::tinyness_before' t='const bool'/>
<smbr r='std::__1::numeric_limits::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_specialized' t='const bool'/>
<fun r='_ZNSt3__114numeric_limitsIKT_E3minEv'/>
<fun r='_ZNSt3__114numeric_limitsIKT_E3maxEv'/>
<fun r='_ZNSt3__114numeric_limitsIKT_E6lowestEv'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::digits' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::digits10' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::max_digits10' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_signed' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_integer' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_exact' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::radix' t='const int'/>
<fun r='_ZNSt3__114numeric_limitsIKT_E7epsilonEv'/>
<fun r='_ZNSt3__114numeric_limitsIKT_E11round_errorEv'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::min_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::min_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::max_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::max_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::has_infinity' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::has_denorm_loss' t='const bool'/>
<fun r='_ZNSt3__114numeric_limitsIKT_E8infinityEv'/>
<fun r='_ZNSt3__114numeric_limitsIKT_E9quiet_NaNEv'/>
<fun r='_ZNSt3__114numeric_limitsIKT_E13signaling_NaNEv'/>
<fun r='_ZNSt3__114numeric_limitsIKT_E10denorm_minEv'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_iec559' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_bounded' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_modulo' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::traps' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::tinyness_before' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_specialized' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::digits' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::digits10' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::max_digits10' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_signed' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_integer' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_exact' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::radix' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::min_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::min_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::max_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::max_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::has_infinity' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::has_denorm_loss' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_iec559' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_bounded' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::is_modulo' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::traps' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::tinyness_before' t='const bool'/>
<smbr r='std::__1::numeric_limits{consttype-parameter-0-0}::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_specialized' t='const bool'/>
<fun r='_ZNSt3__114numeric_limitsIVT_E3minEv'/>
<fun r='_ZNSt3__114numeric_limitsIVT_E3maxEv'/>
<fun r='_ZNSt3__114numeric_limitsIVT_E6lowestEv'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::digits' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::digits10' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::max_digits10' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_signed' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_integer' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_exact' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::radix' t='const int'/>
<fun r='_ZNSt3__114numeric_limitsIVT_E7epsilonEv'/>
<fun r='_ZNSt3__114numeric_limitsIVT_E11round_errorEv'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::min_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::min_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::max_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::max_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::has_infinity' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::has_denorm_loss' t='const bool'/>
<fun r='_ZNSt3__114numeric_limitsIVT_E8infinityEv'/>
<fun r='_ZNSt3__114numeric_limitsIVT_E9quiet_NaNEv'/>
<fun r='_ZNSt3__114numeric_limitsIVT_E13signaling_NaNEv'/>
<fun r='_ZNSt3__114numeric_limitsIVT_E10denorm_minEv'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_iec559' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_bounded' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_modulo' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::traps' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::tinyness_before' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_specialized' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::digits' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::digits10' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::max_digits10' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_signed' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_integer' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_exact' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::radix' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::min_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::min_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::max_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::max_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::has_infinity' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::has_denorm_loss' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_iec559' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_bounded' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::is_modulo' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::traps' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::tinyness_before' t='const bool'/>
<smbr r='std::__1::numeric_limits{volatiletype-parameter-0-0}::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_specialized' t='const bool'/>
<fun r='_ZNSt3__114numeric_limitsIVKT_E3minEv'/>
<fun r='_ZNSt3__114numeric_limitsIVKT_E3maxEv'/>
<fun r='_ZNSt3__114numeric_limitsIVKT_E6lowestEv'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::digits' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::digits10' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::max_digits10' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_signed' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_integer' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_exact' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::radix' t='const int'/>
<fun r='_ZNSt3__114numeric_limitsIVKT_E7epsilonEv'/>
<fun r='_ZNSt3__114numeric_limitsIVKT_E11round_errorEv'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::min_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::min_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::max_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::max_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::has_infinity' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::has_denorm_loss' t='const bool'/>
<fun r='_ZNSt3__114numeric_limitsIVKT_E8infinityEv'/>
<fun r='_ZNSt3__114numeric_limitsIVKT_E9quiet_NaNEv'/>
<fun r='_ZNSt3__114numeric_limitsIVKT_E13signaling_NaNEv'/>
<fun r='_ZNSt3__114numeric_limitsIVKT_E10denorm_minEv'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_iec559' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_bounded' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_modulo' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::traps' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::tinyness_before' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_specialized' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::digits' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::digits10' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::max_digits10' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_signed' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_integer' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_exact' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::radix' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::min_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::min_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::max_exponent' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::max_exponent10' t='const int'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::has_infinity' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::has_denorm_loss' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_iec559' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_bounded' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::is_modulo' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::traps' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::tinyness_before' t='const bool'/>
<smbr r='std::__1::numeric_limits{constvolatiletype-parameter-0-0}::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::numeric_limits::digits' t='const int'/>
<smbr r='std::__1::numeric_limits::digits' t='const int'/>
<smbr r='std::__1::numeric_limits::digits' t='const int'/>
<smbr r='std::__1::numeric_limits::digits' t='const int'/>
