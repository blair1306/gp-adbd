<dec f='codebrowser/bionic/libc/include/math.h' l='330' type='float remquof(float , float , int * )'/>
<def f='codebrowser/bionic/libm/upstream-freebsd/lib/msun/src/s_remquof.c' l='29' ll='122' type='float remquof(float x, float y, int * quo)'/>
<doc f='codebrowser/bionic/libm/upstream-freebsd/lib/msun/src/s_remquof.c' l='21'>/*
 * Return the IEEE remainder and set *quo to the last n bits of the
 * quotient, rounded to the nearest integer.  We choose n=31 because
 * we wind up computing all the integer bits of the quotient anyway as
 * a side-effect of computing the remainder by the shift and subtract
 * method.  In practice, this is far more bits than are needed to use
 * remquo in reduction algorithms.
 */</doc>
<use f='codebrowser/external/libcxx/include/cmath' l='1530' u='c' c='_ZNSt3__16remquoEffPi'/>
