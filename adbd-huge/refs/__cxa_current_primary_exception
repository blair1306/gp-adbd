<dec f='codebrowser/external/libcxxabi/include/cxxabi.h' l='159' type='void * __cxa_current_primary_exception()'/>
<use f='codebrowser/external/libcxx/src/exception.cpp' l='279' u='c' c='_ZSt17current_exceptionv'/>
<doc f='codebrowser/external/libcxxabi/include/cxxabi.h' l='157'>// Apple additions to support C++ 0x exception_ptr class
// These are primitives to wrap a smart pointer around an exception object</doc>
<def f='codebrowser/external/libcxxabi/src/cxa_exception.cpp' l='639' ll='659' type='void * __cxa_current_primary_exception()'/>
<doc f='codebrowser/external/libcxxabi/src/cxa_exception.cpp' l='629'>/*
    Returns a pointer to the thrown object (if any) at the top of the
    caughtExceptions stack.  Atomically increment the exception&apos;s referenceCount.
    If there is no such thrown object or if the thrown object is foreign,
    returns null.

    We can use __cxa_get_globals_fast here to get the globals because if there have
    been no exceptions thrown, ever, on this thread, we can return NULL without 
    the need to allocate the exception-handling globals.
*/</doc>
