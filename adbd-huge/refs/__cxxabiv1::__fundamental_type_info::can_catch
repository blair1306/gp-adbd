<dec f='codebrowser/external/libcxxabi/src/private_typeinfo.h' l='37' type='bool __cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info * , void *&amp; ) const'/>
<inh f='codebrowser/external/libcxxabi/src/private_typeinfo.h' l='29' c='__cxxabiv1::__shim_type_info::can_catch'/>
<def f='codebrowser/external/libcxxabi/src/private_typeinfo.cpp' l='187' ll='192' type='bool __cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info * thrown_type, void *&amp; ) const'/>
<doc f='codebrowser/external/libcxxabi/src/private_typeinfo.cpp' l='159'>// can_catch

// A handler is a match for an exception object of type E if
//   1. The handler is of type cv T or cv T&amp; and E and T are the same type
//      (ignoring the top-level cv-qualifiers), or
//   2. the handler is of type cv T or cv T&amp; and T is an unambiguous public
//       base class of E, or
//   3. the handler is of type cv1 T* cv2 and E is a pointer type that can be
//      converted to the type of the handler by either or both of
//      A. a standard pointer conversion (4.10) not involving conversions to
//         pointers to private or protected or ambiguous classes
//      B. a qualification conversion
//   4. the handler is a pointer or pointer to member type and E is
//      std::nullptr_t.

// adjustedPtr:
// 
// catch (A&amp; a) : adjustedPtr == &amp;a
// catch (A* a) : adjustedPtr == a
// catch (A** a) : adjustedPtr == a
// 
// catch (D2&amp; d2) : adjustedPtr == &amp;d2  (d2 is base class of thrown object)
// catch (D2* d2) : adjustedPtr == d2
// catch (D2*&amp; d2) : adjustedPtr == d2
// 
// catch (...) : adjustedPtr == &amp; of the exception

// Handles bullet 1</doc>
