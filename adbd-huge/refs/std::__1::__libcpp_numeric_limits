<def f='codebrowser/external/libcxx/include/limits' l='141' ll='183'/>
<def f='codebrowser/external/libcxx/include/limits' l='197' ll='247'/>
<def f='codebrowser/external/libcxx/include/limits' l='249' ll='295'/>
<def f='codebrowser/external/libcxx/include/limits' l='297' ll='341'/>
<def f='codebrowser/external/libcxx/include/limits' l='343' ll='387'/>
<def f='codebrowser/external/libcxx/include/limits' l='389' ll='437'/>
<size>1</size>
<smbr r='std::__1::__libcpp_numeric_limits::is_specialized' t='const bool'/>
<fun r='_ZNSt3__123__libcpp_numeric_limits3minEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limits3maxEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limits6lowestEv'/>
<smbr r='std::__1::__libcpp_numeric_limits::digits' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits::digits10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits::max_digits10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits::is_signed' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits::is_integer' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits::is_exact' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits::radix' t='const int'/>
<fun r='_ZNSt3__123__libcpp_numeric_limits7epsilonEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limits11round_errorEv'/>
<smbr r='std::__1::__libcpp_numeric_limits::min_exponent' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits::min_exponent10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits::max_exponent' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits::max_exponent10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits::has_infinity' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::__libcpp_numeric_limits::has_denorm_loss' t='const bool'/>
<fun r='_ZNSt3__123__libcpp_numeric_limits8infinityEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limits9quiet_NaNEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limits13signaling_NaNEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limits10denorm_minEv'/>
<smbr r='std::__1::__libcpp_numeric_limits::is_iec559' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits::is_bounded' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits::is_modulo' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits::traps' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits::tinyness_before' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::is_specialized' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::is_signed' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::digits' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::digits10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::max_digits10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::__min' t='const type'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::__max' t='const type'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIT_Lb1EE3minEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIT_Lb1EE3maxEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIT_Lb1EE6lowestEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::is_integer' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::is_exact' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::radix' t='const int'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIT_Lb1EE7epsilonEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIT_Lb1EE11round_errorEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::min_exponent' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::min_exponent10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::max_exponent' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::max_exponent10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::has_infinity' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::has_denorm_loss' t='const bool'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIT_Lb1EE8infinityEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIT_Lb1EE9quiet_NaNEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIT_Lb1EE13signaling_NaNEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIT_Lb1EE10denorm_minEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::is_iec559' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::is_bounded' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::is_modulo' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::traps' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::tinyness_before' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{type-parameter-0-0,true}::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::is_specialized' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::is_signed' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::digits' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::digits10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::max_digits10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::__min' t='const type'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::__max' t='const type'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIbLb1EE3minEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIbLb1EE3maxEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIbLb1EE6lowestEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::is_integer' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::is_exact' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::radix' t='const int'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIbLb1EE7epsilonEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIbLb1EE11round_errorEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::min_exponent' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::min_exponent10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::max_exponent' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::max_exponent10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::has_infinity' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::has_denorm_loss' t='const bool'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIbLb1EE8infinityEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIbLb1EE9quiet_NaNEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIbLb1EE13signaling_NaNEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIbLb1EE10denorm_minEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::is_iec559' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::is_bounded' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::is_modulo' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::traps' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::tinyness_before' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{bool,true}::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::is_specialized' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::is_signed' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::digits' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::digits10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::max_digits10' t='const int'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIfLb1EE3minEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIfLb1EE3maxEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIfLb1EE6lowestEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::is_integer' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::is_exact' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::radix' t='const int'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIfLb1EE7epsilonEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIfLb1EE11round_errorEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::min_exponent' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::min_exponent10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::max_exponent' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::max_exponent10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::has_infinity' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::has_denorm_loss' t='const bool'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIfLb1EE8infinityEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIfLb1EE9quiet_NaNEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIfLb1EE13signaling_NaNEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIfLb1EE10denorm_minEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::is_iec559' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::is_bounded' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::is_modulo' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::traps' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::tinyness_before' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{float,true}::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::is_specialized' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::is_signed' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::digits' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::digits10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::max_digits10' t='const int'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIdLb1EE3minEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIdLb1EE3maxEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIdLb1EE6lowestEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::is_integer' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::is_exact' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::radix' t='const int'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIdLb1EE7epsilonEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIdLb1EE11round_errorEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::min_exponent' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::min_exponent10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::max_exponent' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::max_exponent10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::has_infinity' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::has_denorm_loss' t='const bool'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIdLb1EE8infinityEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIdLb1EE9quiet_NaNEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIdLb1EE13signaling_NaNEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIdLb1EE10denorm_minEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::is_iec559' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::is_bounded' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::is_modulo' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::traps' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::tinyness_before' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{double,true}::round_style' t='const std::__1::float_round_style'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::is_specialized' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::is_signed' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::digits' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::digits10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::max_digits10' t='const int'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIgLb1EE3minEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIgLb1EE3maxEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIgLb1EE6lowestEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::is_integer' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::is_exact' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::radix' t='const int'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIgLb1EE7epsilonEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIgLb1EE11round_errorEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::min_exponent' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::min_exponent10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::max_exponent' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::max_exponent10' t='const int'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::has_infinity' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::has_quiet_NaN' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::has_signaling_NaN' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::has_denorm' t='const std::__1::float_denorm_style'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::has_denorm_loss' t='const bool'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIgLb1EE8infinityEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIgLb1EE9quiet_NaNEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIgLb1EE13signaling_NaNEv'/>
<fun r='_ZNSt3__123__libcpp_numeric_limitsIgLb1EE10denorm_minEv'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::is_iec559' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::is_bounded' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::is_modulo' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::traps' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::tinyness_before' t='const bool'/>
<smbr r='std::__1::__libcpp_numeric_limits{longdouble,true}::round_style' t='const std::__1::float_round_style'/>
