<dec f='codebrowser/external/boringssl/src/crypto/des/internal.h' l='163'/>
<use f='codebrowser/external/boringssl/src/crypto/des/des.c' l='311' u='c'/>
<use f='codebrowser/external/boringssl/src/crypto/des/des.c' l='314' u='c'/>
<use f='codebrowser/external/boringssl/src/crypto/des/des.c' l='315' u='c'/>
<use f='codebrowser/external/boringssl/src/crypto/des/des.c' l='316' u='c'/>
<doc f='codebrowser/external/boringssl/src/crypto/des/internal.h' l='126'>/* IP and FP
 * The problem is more of a geometric problem that random bit fiddling.
 0  1  2  3  4  5  6  7      62 54 46 38 30 22 14  6
 8  9 10 11 12 13 14 15      60 52 44 36 28 20 12  4
16 17 18 19 20 21 22 23      58 50 42 34 26 18 10  2
24 25 26 27 28 29 30 31  to  56 48 40 32 24 16  8  0

32 33 34 35 36 37 38 39      63 55 47 39 31 23 15  7
40 41 42 43 44 45 46 47      61 53 45 37 29 21 13  5
48 49 50 51 52 53 54 55      59 51 43 35 27 19 11  3
56 57 58 59 60 61 62 63      57 49 41 33 25 17  9  1

The output has been subject to swaps of the form
0 1 -&gt; 3 1 but the odd and even bits have been put into
2 3    2 0
different words.  The main trick is to remember that
t=((l&gt;&gt;size)^r)&amp;(mask);
r^=t;
l^=(t&lt;&lt;size);
can be used to swap and move bits between words.

So l =  0  1  2  3  r = 16 17 18 19
        4  5  6  7      20 21 22 23
        8  9 10 11      24 25 26 27
       12 13 14 15      28 29 30 31
becomes (for size == 2 and mask == 0x3333)
   t =   2^16  3^17 -- --   l =  0  1 16 17  r =  2  3 18 19
         6^20  7^21 -- --        4  5 20 21       6  7 22 23
        10^24 11^25 -- --        8  9 24 25      10 11 24 25
        14^28 15^29 -- --       12 13 28 29      14 15 28 29

Thanks for hints from Richard Outerbridge - he told me IP&amp;FP
could be done in 15 xor, 10 shifts and 5 ands.
When I finally started to think of the problem in 2D
I first got ~42 operations without xors.  When I remembered
how to use xors :-) I got it to its final state.
*/</doc>
